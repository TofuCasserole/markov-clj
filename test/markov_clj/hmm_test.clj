(ns markov-clj.hmm-test
  (:require [clojure.test :refer :all]
            [markov-clj.hmm :refer :all]
            [clojure.core.matrix :refer :all]))

(def example-hmm (->MatrixHMM [0.7 0.25 0.05]
                              [[0.15 0.1 0.6]
                               [0.6  0.5 0.1]
                               [0.25 0.4 0.3]]
                              [[0.645 0     0  ]
                               [0.345 0.495 0  ]
                               [0.01  0.495 0.6]
                               [0     0.01  0.4]]))

(deftest norm-prob-vec-test
  (testing "Probability vector normalization"
    (is (= [1.0 0.0 0.0] (norm-prob-vec [0.4515 0 0])))
    (is (= [0.6611909650924025 0.33880903490759756 0.0] (norm-prob-vec [0.2415 0.12375 0])))
    (is (= [0.04354587869362364 0.7698289269051322 0.18662519440124417] (norm-prob-vec [0.007 0.123750 0.03])))
    (is (= [0.0 0.1111111111111111 0.8888888888888888] (norm-prob-vec [0 0.0025 0.02])))))

(deftest forward-backward-test
  (testing "Forward-backward algorithm"
    (is (= '([1.0 0.0 0.0]
             [0.1127973397693089 0.887202660230691 0.0]
             [6.22983140241082E-5 0.7100048379395141 0.28993286374646193]
             [2.445022681454398E-4 0.5801294255894622 0.41962607214239245]
             [1.6084692525791371E-4 0.4269922171342877 0.5728469359404543]
             [0.0 6.701080959529574E-4 0.9993298919040472]
             [0.6543126352116055 0.3456873647883945 0.0]
             [2.7960527714653517E-5 0.18947340337162785 0.8104986361006574]
             [1.0 0.0 0.0]
             [0.1082906857727738 0.8917093142272263 0.0])
           (forward-backward example-hmm [0 1 2 2 2 3 1 2 0 1])))))
